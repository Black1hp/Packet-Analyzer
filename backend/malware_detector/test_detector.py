#!/usr/bin/env python3
"""
Test script for the malware detector module.

This script creates a sample HTTP event and passes it to the malware detector
to verify that it works properly.
"""

import os
import sys
import json
import hashlib
from datetime import datetime
from dotenv import load_dotenv

# Add the parent directory to the path so we can import the malware_detector module
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Import the malware detector
from malware_detector import process_suricata_event

# Load environment variables
load_dotenv(os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), '.env'))

def create_test_http_event(url, filename, content):
    """
    Create a test HTTP event with the given URL, filename, and content.
    
    Args:
        url (str): The URL to use in the event
        filename (str): The filename to use in the Content-Disposition header
        content (bytes): The content of the HTTP response
        
    Returns:
        dict: A Suricata-like HTTP event
    """
    # Calculate content hash for logging
    content_hash = hashlib.sha256(content).hexdigest()
    
    # Create HTTP event
    event = {
        'event_type': 'http',
        'timestamp': datetime.now().isoformat(),
        'src_ip': '192.168.1.100',
        'src_port': 12345,
        'dest_ip': '192.168.1.10',
        'dest_port': 80,
        'proto': 'TCP',
        'http': {
            'hostname': 'malicious-site.example.com',
            'url': url,
            'http_port': 80,
            'http_method': 'GET',
            'http_response_status': 200,
            'http_response_headers': {
                'Content-Type': 'application/octet-stream',
                'Content-Disposition': f'attachment; filename="{filename}"',
                'Content-Length': str(len(content))
            },
            'http_body': content
        }
    }
    
    print(f"Created test HTTP event:")
    print(f"  URL: {url}")
    print(f"  Filename: {filename}")
    print(f"  Content Hash: {content_hash}")
    print(f"  Content Size: {len(content)} bytes")
    
    return event

def test_malware_detection():
    """
    Test the malware detector with various file types.
    """
    print("=" * 80)
    print("Testing Malware Detector")
    print("=" * 80)
    
    # Test cases with different file types
    test_cases = [
        {
            'url': 'http://malicious-site.example.com/malware.exe',
            'filename': 'malware.exe',
            'content': b'MZ\x90\x00\x03\x00\x00\x00\x04\x00\x00\x00\xff\xff\x00\x00\xb8\x00\x00\x00\x00\x00\x00\x00'
                      b'This is a simulated executable file for testing purposes only.'
        },
        {
            'url': 'http://malicious-site.example.com/document.docm',
            'filename': 'document.docm',
            'content': b'PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      b'This is a simulated Office document with macros for testing purposes only.'
        },
        {
            'url': 'http://safe-site.example.com/image.jpg',
            'filename': 'image.jpg',
            'content': b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00H\x00H\x00\x00\xff'
                      b'This is a simulated JPEG image file for testing purposes only.'
        }
    ]
    
    # Process each test case
    for i, test_case in enumerate(test_cases):
        print(f"\nTest Case {i+1}:")
        print("-" * 40)
        
        # Create test event
        event = create_test_http_event(
            test_case['url'],
            test_case['filename'],
            test_case['content']
        )
        
        # Process the event
        print("\nProcessing event...")
        result = process_suricata_event(event)
        
        # Check result
        if result:
            print("\nMalware detected!")
            print(f"  Filename: {result.get('filename')}")
            print(f"  Hash: {result.get('hash')}")
            print(f"  URL: {result.get('url')}")
            print(f"  Verdict: {result.get('result', {}).get('verdict', 'UNKNOWN')}")
            
            # Print VirusTotal results if available
            vt_result = result.get('result', {})
            if vt_result:
                print(f"  VirusTotal Results:")
                print(f"    Malicious: {vt_result.get('malicious', 0)}")
                print(f"    Suspicious: {vt_result.get('suspicious', 0)}")
                print(f"    Undetected: {vt_result.get('undetected', 0)}")
                print(f"    Total: {vt_result.get('total', 0)}")
        else:
            print("\nNo malware detected.")
        
        print("\n" + "=" * 40)
    
    print("\nTest completed.")

if __name__ == "__main__":
    test_malware_detection()
